{{ 'about-product-slider.css' | asset_url | stylesheet_tag }}
{{ 'about-product-card.css' | asset_url | stylesheet_tag }}

{% style %}
    .product-slider.product-slider-wrapper--{{ section.id }} {
        padding-top: {{ section.settings.padding_top | times: 0.8 | round: 0 }}px;
        padding-bottom: {{ section.settings.padding_bottom | times: 0.8 | round: 0 }}px;
    }

    @media only screen and (min-width: 769px) {
        .product-slider.product-slider-wrapper--{{ section.id }} {
            padding-top: {{ section.settings.padding_top }}px;
            padding-bottom: {{ section.settings.padding_bottom }}px;
        }
    }
{% endstyle %}

<div class="product-slider product-slider-wrapper--{{ section.id }}" id="product-recomendations-{{ section.id }}" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit={{ section.settings.product_list_limit }}&intent={{- section.settings.intent -}}">
{%- if recommendations.performed? and recommendations.products_count > 0 -%}
    {% if section.settings.title != blank %}
        <h2 class="product-slider__title">{{ section.settings.title }}</h2>
    {% endif %}
    <div class="swiper product-slider--{{ section.id }}">
        <div class="swiper-wrapper">
            {% for product in recommendations.products %}
                {% unless product.title contains 'Duplicat' %}
                    <div class="swiper-slide">
                        {% render 'about-product-card', product: product %}
                    </div>
                {% endunless %}
            {% endfor %}
        </div>

        <div class="product-slider__button-prev product-slider__button-prev--{{ section.id }}">
            <svg width="23" height="16" viewBox="0 0 23 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M0.864321 8.82161C0.473797 8.43108 0.473797 7.79792 0.864321 7.4074L7.22828 1.04343C7.61881 0.65291 8.25197 0.65291 8.6425 1.04343C9.03302 1.43396 9.03302 2.06712 8.6425 2.45765L2.98564 8.1145L8.6425 13.7714C9.03302 14.1619 9.03302 14.795 8.6425 15.1856C8.25197 15.5761 7.61881 15.5761 7.22828 15.1856L0.864321 8.82161ZM23 9.1145H1.57143V7.1145H23V9.1145Z" fill="white"/>
            </svg>
        </div>
        <div class="product-slider__button-next product-slider__button-next--{{ section.id }}">
            <svg width="23" height="16" viewBox="0 0 23 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M22.1357 8.82161C22.5262 8.43108 22.5262 7.79792 22.1357 7.4074L15.7717 1.04343C15.3812 0.65291 14.748 0.65291 14.3575 1.04343C13.967 1.43396 13.967 2.06712 14.3575 2.45765L20.0144 8.1145L14.3575 13.7714C13.967 14.1619 13.967 14.795 14.3575 15.1856C14.748 15.5761 15.3812 15.5761 15.7717 15.1856L22.1357 8.82161ZM0 9.1145H21.4286V7.1145H0V9.1145Z" fill="white"/>
            </svg>
        </div>
    </div>
{%- endif -%}
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const productRecommendationsUrl = document.getElementById('product-recomendations-{{ section.id }}').dataset.url;
        const productRecommendationsSection = document.querySelector('#product-recomendations-{{ section.id }}');
        fetch(productRecommendationsUrl)
            .then(response => response.text())
            .then((text) => {
                const html = document.createElement('div');
                html.innerHTML = text;
                const recommendations = html.querySelector('#product-recomendations-{{ section.id }}');

                if (recommendations && recommendations.innerHTML.trim().length) {
                    productRecommendationsSection.innerHTML = recommendations.innerHTML;
                }
            })
            .then(async () => {
                const productSlider1 = setTimeout(() => {
                    return initProductSlider('{{ section.id }}');
                }, 100)
                const productSliderWrapper = document.querySelector('.product-slider--{{ section.id }} .swiper-wrapper')
                const productSlides = Array.from(document.querySelectorAll('.product-slider--{{ section.id }} .swiper-slide'));
                const productSlidesWidth1 = productSlides.reduce((acc, slide) => {
                    acc += slide.offsetWidth + 20
                    return acc
                }, 0);

                if(productSliderWrapper) {
                    if (productSlidesWidth1 <= window.innerWidth) {
                        productSliderWrapper.classList.add('centered');
                        productSlider1.enabled = false;
                    } else {
                        productSliderWrapper.classList.remove('centered')
                        productSlider1.enabled = true;
                    }
                }
                window.addEventListener("resize", (event) => {
                    if (productSlidesWidth1 <= window.innerWidth) {
                    productSliderWrapper.classList.add('centered');
                        productSlider1.enabled = false;
                    } else {
                        productSliderWrapper.classList.remove('centered')
                        productSlider1.enabled = true;
                    }
                });
            })
    })
</script>

{% schema %}
    {
        "name": "Product recomendations",
        "settings": [
            {
                "type": "text",
                "id": "title",
                "label": "Title"
            },
            {
                "type": "range",
                "id": "padding_top",
                "min": 0,
                "max": 100,
                "step": 1,
                "unit": "px",
                "label": "Free spave above",
                "default": 0
            },
            {
                "type": "range",
                "id": "padding_bottom",
                "min": 0,
                "max": 100,
                "step": 1,
                "unit": "px",
                "label": "Free spave below",
                "default": 0
            },
            {
                "type": "range",
                "id": "product_list_limit",
                "min": 1,
                "max": 10,
                "step": 1,
                "default": 10,
                "label": "t:sections.main-product.blocks.complementary_products.settings.product_list_limit.label"
            },
            {
                "type": "select",
                "id": "intent",
                "label": "Recomendation type",
                "options": [
                    {
                    "group": "recomendations_type",
                    "value": "related",
                    "label": "Related"
                    },
                    {
                    "group": "recomendations_type",
                    "value": "complementary",
                    "label": "Complementary"
                    }
                ],
                "default": "related"
            }
        ],
        "presets": [
            {
                "name": "Product recomendations"
            }
        ]
    }
{% endschema %}
